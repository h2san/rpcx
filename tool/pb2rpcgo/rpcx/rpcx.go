package rpcx

import (
	"fmt"
	pb "github.com/golang/protobuf/protoc-gen-go/descriptor"
	"github.com/golang/protobuf/protoc-gen-go/generator"
	"strings"
)

func init(){
	generator.RegisterPlugin(new(rpcx))
}

type rpcx struct {
	gen *generator.Generator
}

//Name returns the name of this plugin
func (t *rpcx) Name() string {
	return "rpcx"
}

//Init initializes the plugin.
func (t *rpcx) Init(gen *generator.Generator) {
	t.gen = gen
}

// GenerateImports generates the import declaration for this file.
func (t *rpcx) GenerateImports(file *generator.FileDescriptor) {
}

// Generate generates code for the services in the given file.
func (t *rpcx) Generate(file *generator.FileDescriptor) {
	if len(file.FileDescriptorProto.Service) == 0 {
		return
	}

	for i, service := range file.FileDescriptorProto.Service {
		t.generateService(file, service, i)
	}
}

// upperFirstLatter make the fisrt charater of given string  upper class
func upperFirstLatter(s string) string {
	if len(s) == 0 {
		return ""
	}
	if len(s) == 1 {
		return strings.ToUpper(string(s[0]))
	}
	return strings.ToUpper(string(s[0])) + s[1:]
}

// P forwards to g.gen.P.
func (t *rpcx) P(args ...interface{}) { t.gen.P(args...) }

// generateService generates all the code for the named service
func (t *rpcx) generateService(file *generator.FileDescriptor, service *pb.ServiceDescriptorProto, index int) {
	originServiceName := service.GetName()
	serviceName := upperFirstLatter(originServiceName)
	t.P("// This following code was generated by rpcx")
	t.P(fmt.Sprintf("// Gernerated from %s", file.GetName()))
	t.P(fmt.Sprintf(`type  %s struct {
		s model.Servant
	}
	`, serviceName))
	t.P()

	//generate SetServant
	t.P(fmt.Sprintf(`//SetServant is required by the servant interface.
	func (obj *%s) SetServant(s model.Servant){
		obj.s = s
	}
	`, serviceName))
	t.P()
	//generate AddServant
	t.P(fmt.Sprintf(`//AddServant is required by the servant interface
	func (obj *%s) AddServant(imp imp%s, objStr string){
		tars.AddServant(obj, imp, objStr)
	}`, serviceName, serviceName))

	//generate TarsSetTimeout
	t.P(fmt.Sprintf(`//TarsSetTimeout is required by the servant interface. t is the timeout in ms. 
	func (obj *%s) TarsSetTimeout(t int){
		obj.s.TarsSetTimeout(t)
	}
	`, serviceName))
	t.P()

	//generate the interface
	t.P(fmt.Sprintf("type imp%s interface{", serviceName))
	for _, method := range service.Method {
		t.P(fmt.Sprintf("%s (input %s) (output %s, err error)",
			upperFirstLatter(method.GetName()), t.typeName(method.GetInputType()), t.typeName(method.GetOutputType())))
	}
	t.P("}")
	t.P()

	for _, method := range service.Method {
		t.generateClientCode(service, method)
	}
}

// Given a type name defined in a .proto, return its name as we will print it.
func (t *rpcx) typeName(str string) string {
	return t.gen.TypeName(t.objectNamed(str))
}

// Given a type name defined in a .proto, return its object.
// Also record that we're using it, to guarantee the associated import.
func (t *rpcx) objectNamed(name string) generator.Object {
	t.gen.RecordTypeUse(name)
	return t.gen.ObjectNamed(name)
}

func (t *rpcx) generateClientCode(service *pb.ServiceDescriptorProto, method *pb.MethodDescriptorProto) {
	methodName := upperFirstLatter(method.GetName())
	serviceName := upperFirstLatter(service.GetName())
	inType := t.typeName(method.GetInputType())
	outType := t.typeName(method.GetOutputType())
	t.P(fmt.Sprintf(`// %s is client rpc method as defined
		func (obj *%s) %s(input %s)(output %s, err error){
			var _status map[string]string
			var _context map[string]string
			var inputMarshal []byte
			inputMarshal, err = proto.Marshal(&input)
			if err != nil {
				return output, err
			}
			resp := new(requestf.ResponsePacket)
			ctx := context.Background()
			err = obj.s.Tars_invoke(ctx, 0, "%s", inputMarshal, _status, _context, resp)
			if err != nil {
				return output, err
			}
			if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil{
				return output, err
			}
			return output, nil
		}
	`, methodName, serviceName, methodName, inType, outType, method.GetName()))
}